{"version":3,"sources":["data/text.js","App.js","reportWebVitals.js","index.js"],"names":["text","App","state","handleChange","event","target","value","setState","renderText","__html","marked","sanitize","this","className","onChange","rows","dangerouslySetInnerHTML","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mOAAaA,G,MAAO,slB,uBC0CLC,E,4MApCbC,MAAM,CAACF,Q,EAEPG,aAAa,SAACC,GACZ,IAAMJ,EAAKI,EAAMC,OAAOC,MACxB,EAAKC,SAAS,CAACP,U,EAEjBQ,WAAa,SAACR,GAEZ,MAAM,CAACS,OADQC,IAAOV,EAAM,CAACW,UAAS,M,4CAIxC,WAAS,IACAX,EAAQY,KAAKV,MAAbF,KACP,OACE,qBAAKa,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,0BACEA,UAAU,eACVP,MAAON,EACPc,SAAUF,KAAKT,aACfY,KAAK,SAET,qBAAKF,UAAU,WAAf,SACE,qBAAKG,wBAAyBJ,KAAKJ,WAAWR,gB,GAzBxCiB,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SAKlDZ,M","file":"static/js/main.e05fe4d7.chunk.js","sourcesContent":["export const text = '# Exemple Titre\\n## Exemple Sous-Titre \\n### Titre plus profond\\n \\nLes paragraphes sont séparés\\npar une ligne vide.\\n\\nLaissé deux espaces à la fin d\\'une ligne pour  \\naller à la ligne.\\n\\nAttributs *italique*, **gras**, \\n`monospace`, ~~rayé~~.\\n\\nListe:\\n\\n  * Massif du Mont-Blanc\\n  * Massif de la Vanoise\\n  * Massif du Beaufortain\\n\\nListe numérotée:\\n\\n  1. gibson\\n  2. ibanez\\n  3. fender\\n\\n *[Golob Nicolas](https://www.linkedin.com/in/nicolas-golob-67a898184/)* \\n\\n Lien automatique : https://www.nicolasgolob.com// \\n\\n```\\n console.log(\"hello\"); \\n``` '\n","import React, {Component} from 'react'\nimport './styles/App.css'\nimport {text} from './data/text'\nimport marked from 'marked'\n\nclass App extends Component{\n  state={text}\n\n  handleChange=(event)=>{\n    const text=event.target.value\n    this.setState({text})\n  }\n  renderText = (text)=>{\n    const __html = marked(text, {sanitize:true})\n    return{__html}\n  }\n  \n  render(){\n    const {text} = this.state\n    return(\n      <div className='container'>\n        <div className='row'>\n          <div className='col-sm-6'>\n            <textarea\n              className='form-control'\n              value={text}\n              onChange={this.handleChange}\n              rows=\"35\"/> \n          </div>\n          <div className='col-sm-6'>\n            <div dangerouslySetInnerHTML={this.renderText(text)}>\n            </div>\n          </div>\n\n        </div>\n      </div>\n\n    )\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}